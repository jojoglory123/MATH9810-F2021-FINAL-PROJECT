##### simulate a network
node.total <- 100 #1000
p <- 0.1 #0.02
set.seed(5)
network <- generate.network(node.total, p)
rownames(network) <- 1:nrow(network)
colnames(network) <- 1:ncol(network)


##### some basic stats
degrees <- apply(network, 1, sum)
edge.total <- sum(network)/2
degrees.max  <- max(degrees)
degrees.mean <- mean(degrees)
degrees.sd   <- sd(degrees)


##### partition data into clusters:
cluster.total <- 10
cluster.size <- node.total / cluster.total
network.cluster <- list()
for (c in 1:cluster.total){
  network.cluster[[c]] <- network[(cluster.size * (c-1) + 1) : (cluster.size * c), ]
}

##### some parameters for RSLP
iterations <- 100 #iterations before shuffling
network.cluster.list <- list()
network.cluster.list[[1]] <- network.cluster #initial clusters
edge.LP.total <- sum.all(lapply(network.cluster, subnetwork))/2 #initial total edges

##### how many times we shuffle after local maximum
shufflings <- 5
##### create clusters and nodes for shufflings
shuffle.pairs <- matrix(0, nrow = shufflings, ncol = 4) #in ith shuffling, swap cluster(i, 1) node(i, 3) with cluster(i, 2) node(i, 4)
for (i in 1:shufflings){
  shuffle.pairs[i, c(1, 2)] <- sample (c(1:cluster.total), size=2, replace =F)
}
for (i in 1:shufflings){
  shuffle.pairs[i, 3] <- sample (c(1:cluster.size), size=1)
  shuffle.pairs[i, 4] <- sample (c(1:cluster.size), size=1)
}

##### Start clustering now!
for (t in 1:shufflings){
  
  network.cluster[c(shuffle.pairs[t, 1], shuffle.pairs[t, 2])] <- row.swap(network.cluster[[shuffle.pairs[t, 1]]], shuffle.pairs[t, 3], network.cluster[[shuffle.pairs[t, 2]]], shuffle.pairs[t, 4])
  
  for (i in 1:iterations){
    network.cluster <- oneiteration(network.cluster, cluster.total, cluster.size)
    edge.LP.total <- append(edge.LP.total, sum.all(lapply(network.cluster, subnetwork))/2)
    network.cluster.list[[(t-1) * iterations + i + 1]] <- network.cluster #be careful with the index, if no t, the length of list will be the number of iterations without shufflings. and +1 for the fist slot was used for initial

    
  }
}



network.cluster <- network.cluster.list[[which.max(edge.LP.total)]]
# save(network.cluster, file="network.cluster.RData")
# sum.all(lapply(network.cluster, subnetwork))/2

##### assign treatments to random clusters and simulate response
theta <- 0.5
lower <- 0.3
upper <- 0.7
by <- 0.02
rho <- seq(lower, upper, by)
sample.total <- 1000
result <- list()
result[[1]] <- matrix(0, nrow = 4, ncol = length(rho)) # bias of 4 ways in 9 rho
result[[2]] <- matrix(0, nrow = 4, ncol = length(rho)) # variance of 4 ways in 9 rho
names(result) <- c("bias of estimator", "variance of estimator")
rownames(result[[1]]) <- c("SUTVA", "NE", "FNE1", "FNE2")
colnames(result[[1]]) <- c("rho=0.1", "0.2", "0.3","0.4","0.5","0.6","0.7","0.8","0.9")
rownames(result[[2]]) <- c("SUTVA", "NE", "FNE1", "FNE2")
colnames(result[[2]]) <- c("rho=0.1", "0.2", "0.3","0.4","0.5","0.6","0.7","0.8","0.9")


lambda0 <- -1.5
lambda1 <- c(0.25, 0.5, 0.75, 1.0)
lambda2 <- c(0, 0.1, 0.5, 1.0)

##### find true ATE first
ATE.true.stoch <- matrix(0, nrow = sample.total, ncol = 1)

for (s in 1: sample.total){
  Y.all1 <- matrix(0, nrow = node.total, ncol = 1) #used to find true ATE
  Y.all0 <- matrix(0, nrow = node.total, ncol = 1) #used to find true ATE

  for (t in 1:4){
    ##### finding true ATE by assigning Z to all 1 or all 0
    Y.all1 <- lambda0 + lambda1[t] * (matrix(1, nrow = node.total, ncol = 1)) + lambda2[t] * (network %*% Y.all1) / degrees + as.matrix(rnorm(node.total, 0, 1), nrow = node.total, ncol = 1)
    Y.all1 <- as.numeric(Y.all1 > 0)
    Y.all1 <- as.matrix(Y.all1, nrow = node.total, ncol = 1)

    
    Y.all0 <- lambda0 + lambda1[t] * (matrix(0, nrow = node.total, ncol = 1)) + lambda2[t] * (network %*% Y.all0) / degrees + as.matrix(rnorm(node.total, 0, 1), nrow = node.total, ncol = 1)
    Y.all0 <- as.numeric(Y.all0 > 0)
    Y.all0 <- as.matrix(Y.all0, nrow = node.total, ncol = 1)
  }
  
  ATE.true.stoch[s, ] <- sum(Y.all1 - Y.all0) / node.total
}

ATE.true <- mean(ATE.true.stoch)

#### find results.
for (r in rho){
  treatment.clusters.total <- cluster.total* r
  treatments <- matrix(0, nrow = sample.total, ncol = treatment.clusters.total)
  ATE.SUTVA <- matrix(0, nrow = sample.total, ncol = 1)
  ATE.NE <- matrix(0, nrow = sample.total, ncol = 1)
  ATE.FNE1 <- matrix(0, nrow = sample.total, ncol = 1)
  ATE.FNE2 <- matrix(0, nrow = sample.total, ncol = 1)
  
  for (i in 1:nrow(treatments)){
    treatments[i, ] <- sample(c(1:cluster.total), size = ncol(treatments), replace = F)
  }
  
  
  for (s in 1: sample.total){
    Z <- matrix(0, nrow = node.total, ncol = 1)
    rownames(Z) <- 1:nrow(Z)
    colnames(Z) <- 1:ncol(Z)
    name.list <- NULL
    
    for (c in 1:ncol(treatments)){
      name.list <- append(name.list, rownames(network.cluster[[treatments[s, c]]]))
    }
    
    Z[name.list, ] <- 1
    
    for (t in 1:4){
      ##### simulate response
      Y <- lambda0 + lambda1[t] * Z + lambda2[t] * (network %*% Y) / degrees + as.matrix(rnorm(node.total, 0, 1), nrow = node.total, ncol = 1)
      Y <- as.numeric(Y > 0)
      Y <- as.matrix(Y, nrow = node.total, ncol = 1)
      rownames(Y) <- 1:nrow(Y)
      colnames(Y) <- 1:ncol(Y)
    }
   
    
    ##### SUTVA method
    ATE.SUTVA[s, ] <- sum(Y[which(Z == 1, arr.ind = T)]) / (node.total * r) - sum(Y[which(Z == 0, arr.ind = T)]) / (node.total - node.total * r)
    
    ##### Neighborhood Exposure #theta=0.75
    expose.result <- expose(network, Z, theta)
    NET <- Y[which(expose.result[[2]] == 1, arr.ind = T)]
    NEC <- Y[which(expose.result[[1]] == 1, arr.ind = T)]
    ATE.NE[s, ] <- sum(NET) / length(NET) - sum(NEC) / length(NEC)
    #ATE.NE[s, ] <- sum(NET) / max(length(NET), 1) - sum(NEC) / max(length(NEC), 1) #in case no node is network exposed to treatment (control)
    
    ##### Fraction Neighborhood Exposure Linear Additive Model 1
    Sigma <- expose.result[[3]]
    lm.result1 <- coef(lm(Y ~ Z + Sigma))
    ATE.FNE1[s, ] <- lm.result1[2] + lm.result1[3]
    
    ##### Fraction Neighborhood Exposure Linear Additive Model 2
    lm.result2 <- coef(lm(NEC ~ Sigma[which(expose.result[[1]] == 1, arr.ind = T)]))
    lm.result3 <- coef(lm(NET ~ Sigma[which(expose.result[[2]] == 1, arr.ind = T)]))
    ATE.FNE2[s, ] <- lm.result3[1] + lm.result3[2] - lm.result2[1]
  }
  
  result[[1]][1, which(rho == r)] <- mean(ATE.SUTVA) - ATE.true
  result[[1]][2, which(rho == r)] <- mean(ATE.NE) - ATE.true
  result[[1]][3, which(rho == r)] <- mean(na.omit(ATE.FNE1)) - ATE.true #omit NA
  result[[1]][4, which(rho == r)] <- mean(na.omit(ATE.FNE2)) - ATE.true
  
  result[[2]][1, which(rho == r)] <- var(ATE.SUTVA)
  result[[2]][2, which(rho == r)] <- var(ATE.NE)
  result[[2]][3, which(rho == r)] <- var(na.omit(ATE.FNE1))
  result[[2]][4, which(rho == r)] <- var(na.omit(ATE.FNE2))
}

plot(edge.LP.total, xlab = "Swappings", ylab = "total edges", main = "Tracking change in total edges")

plot(x = rho, y = result[[1]][1, ], ylim = c(min(min(result[[1]][1, ]), min(result[[1]][2, ]), min(result[[1]][3, ]), min(result[[1]][4, ])), max(max(result[[1]][1, ]), max(result[[1]][2, ]), max(result[[1]][3, ]), max(result[[1]][4, ]) ))
     , pch = 19, type = "o", col = 1, xlab = expression(paste("percentage of units in treatment (", rho, ")")), ylab = "bias of ATE estimator", main =  "The bias of different estimators"    )
lines(x = rho, y = result[[1]][2, ], pch = 19, type = "o", col=2)
lines(x = rho, y = result[[1]][3, ], pch = 19, type = "o", col=3)
lines(x = rho, y = result[[1]][4, ], pch = 19, type = "o", col=4)
abline(h = 0, lty=2)
legend("bottomright", cex = 1.0, bty = "n", legend = c("SUTVA", "Neighborhood Exposure Model", "Fraction NE Linear Model 1", "Fraction NE Linear Model 2"), text.col = c(1, 2, 3, 4), col = c(1, 2, 3, 4), pch = c(16,16, 16,16))

plot(x = rho, y = result[[2]][1, ], ylim = c(min(min(result[[2]][1, ]), min(result[[2]][2, ]), min(result[[2]][3, ]), min(result[[2]][4, ])), 0.15)
     , pch = 19, type = "o", col=1, xlab = expression(paste("percentage of units in treatment (", rho, ")")), ylab = "variance of ATE estimator", main = "The variance of different estimators") #max(max(result[[2]][1, ]), max(result[[2]][2, ]), max(result[[2]][3, ]), max(result[[2]][4, ]) )
lines(x = rho, y = result[[2]][2, ], pch = 19, type = "o", col=2)
lines(x = rho, y = result[[2]][3, ], pch = 19, type = "o", col=3)
lines(x = rho, y = result[[2]][4, ], pch = 19, type = "o", col=4)
legend("topleft", cex = 1.0, bty = "n", legend = c("SUTVA", "Neighborhood Exposure Model", "Fraction NE Linear Model 1", "Fraction NE Linear Model 2"), text.col = c(1, 2, 3, 4), col = c(1, 2, 3, 4), pch = c(16,16, 16,16))
