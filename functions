rm(list = ls())

##### function of simulating a network
generate.network = function(n, p) {
  # Generate matrix values, sampling 0 or 1 with given probabilities
  matvals = sample(c(0, 1), n * (n - 1)/2, replace = TRUE, prob = c(1 - p, p))
  # From the values above, generate a symmetric matrix
  networkmat = matrix(rep(0, n * n), ncol = n)
  mv = 1
  for (i in 1:n) {
    for (j in 1:n) {
      if (i > j) {
        networkmat[i, j] = matvals[mv]
        networkmat[j, i] = matvals[mv]
        mv = mv + 1
      }
    }
  }
  return(networkmat)
}

##### a function swapping ith row in A with jth row in B (labels also change)
row.swap = function(A, i, B, j){
  name1 <- row.names(A)[i]
  name2 <- row.names(B)[j]
  node1 <- A[i, ]
  node2 <- B[j, ]
  A[i, ] <- node2
  B[j, ] <- node1
  rownames(A)[i] <- name2
  rownames(B)[j] <- name1
  return(list(A, B))
}

##### For a cluster with some nodes and neighbors, find the cluster-network (which is the graph of these nodes)
subnetwork = function(A){
  B = A[row.names(A) , row.names(A)]
  return(B)
}

##### sum all entries in list
sum.all = function(L){
  listsum = 0
  for (i in 1:length(L)){
    listsum = listsum + sum(L[[i]])
  }
  return(listsum)
}

##### LP algorithm for one iteration
oneiteration <- function(clusters, howmanyclusters, howlargeclusters){
  for (c in 1:howmanyclusters){ #current cluster
    for (i in 1:howlargeclusters){
      for (r in (1:howmanyclusters)[-c]){  #clusters rather than current cluster
        for (j in (1:howlargeclusters)){
          cluster.before <- clusters[[c]]
          cluster.network.before <- subnetwork(cluster.before)
          cluster.before.edge <- sum(cluster.network.before)/2
          
          cluster.after <- row.swap(clusters[[c]], i, clusters[[r]], j) #it returns a 2-list of A and B after swapping
          cluster.network.after <- subnetwork(cluster.after[[1]])
          cluster.after.edge <- sum(cluster.network.after)/2
          
          if (cluster.before.edge < cluster.after.edge){
            clusters[[c]] <- cluster.after[[1]]
            clusters[[r]] <- cluster.after[[2]]
            break
          }
          
        }
        
        if (cluster.before.edge < cluster.after.edge){
          break
        }
        
      }
    }
  }
  
  return(clusters)
  
}

##### function to determine whether a node is neighborhood exposed to treatment, or neighborhood exposed to control, and calculate sigma
##### A for network, B treatment or control, C responce, threshold is theta
expose <- function(A, B, threshold) {
  percent <- matrix(0, nrow = nrow(A), ncol = 1)
  rownames(percent) <- 1:nrow(percent)
  colnames(percent) <- 1:ncol(percent)
  
  exposedtoC <- matrix(0, nrow = nrow(A), ncol = 1)
  rownames(exposedtoC) <- 1:nrow(exposedtoC)
  colnames(exposedtoC) <- 1:ncol(exposedtoC)
  
  exposedtoT <- matrix(0, nrow = nrow(A), ncol = 1)
  rownames(exposedtoT) <- 1:nrow(exposedtoT)
  colnames(exposedtoT) <- 1:ncol(exposedtoT)
  
  for (i in 1:nrow(A)){
    percent[i, 1] <- length(which((A[i, ]==1) & (B == 1))) / sum(A[i, ])
    exposedtoC[i, 1] <- as.numeric( (B[i, 1] == 0) && (percent[i, 1]<=(1-threshold) ) )
    exposedtoT[i, 1] <- as.numeric( (B[i, 1] == 1) && (percent[i, 1]>threshold) )
  }
  
  return(list(exposedtoC, exposedtoT, percent))
}
